* nQuire Manual
** About

nQuire implements a set of commands to estimate ploidy level of
individuals from species, where recent polyploidization occurred and
intraspecific ploidy variation is observed. Specifically, nQuire uses
next-generation sequencing data to distinguish between diploids,
triploids and tetraploids, on the basis of frequency distributions at
variant sites where only two bases are segregating.

For more background, see also the publication at: http://biorxiv.org/content/early/2017/05/29/143537

** Get it

To use nQuire, you will need a Linux machine where the gcc compiler,
as well as the libz, libm and libpthread system libraries are
installed.
To acquire nQuire, first clone the repository recursively:

#+BEGIN_SRC bash
git clone --recursive https://github.com/clwgg/nQuire
#+END_SRC

This will clone both the nQuire code, as well as the htslib module,
which is its only external dependency. After cloning, first compile
the submodule, and then the nQuire code:

#+BEGIN_SRC bash
cd nQuire
make submodules
make
#+END_SRC

This will create the nQuire binary, which you can copy or move
anywhere for subsequent use.

** Usage
*** Generation of .bin file
nQuire requires as input only a .bam alignment file, which contains
NGS reads mapped to a suitable reference genome. The required
information is extracted from the .bam alignments into a binary file
(suffix .bin), which is generated using the “create” subcommand. By
default, only sites where two bases are segregating at a minimum
frequency of 0.2 are reported. These settings are recommended to use
for the subsequent analyses of ploidy. The minimum frequency may be
adjusted using the “-f” flag. It is also possible to establish filters
for mapping quality and minimum coverage through the “-q” and “-c”
options, respectively.

#+BEGIN_SRC bash
nQuire create -b input.bam -o base
#+END_SRC

The .bin file can also store reference IDs and positional information
(genomic coordinates) when the “create” subcommand is used with the
“-x” flag.

#+BEGIN_SRC bash
nQuire create -b input.bam -o base -x
#+END_SRC

*** Visualization of .bin file
The file produced by the “create” subcommand can be visually inspected
using either the “view” or “histo” subcommands. The “histo” subcommand
will produce a ASCII histogram on the command line based on the base
frequencies stored in the .bin file.

#+BEGIN_SRC bash
nQuire histo base.bin
#+END_SRC

The “view” subcommand allows to inspect the coverage and base counts
at all positions in the file, as well as filter them to produce a new
.bin file.

#+BEGIN_SRC bash
nQuire view base.bin
#+END_SRC

The columns in the output of the “view” subcommand represent the
following:

1. Coverage
2. Base count 1
3. Base count 2
...

If an extended .bin was created using the “-x” flag of the “create”
subcommand, the “view” subcommand can interact with this file too.
Since it is much easier to store reference IDs instead of reference
names, the “view” subcommand allows to re-annotate these reference IDs
with their corresponding names if the .bam file that the .bin file was
created from is handed to it via the “-a” flag.

#+BEGIN_SRC bash
nQuire view base.bin -a input.bam
#+END_SRC

The columns in the output of the “view” subcommand used on an extended
.bin file represent the following:

1. Reference sequence (ID)
2. Reference position
3. Coverage
4. Base count 1
5. Base count 2
...

Using the “-f” flag of the view subcommand one can query the type of
the .bin, which so far is 0 for the default format, and 1 for the
extended format.

#+BEGIN_SRC bash
nQuire view -f base.bin
#+END_SRC

*** Denoising
In many cases, the base frequency histogram contains a high baseline
of noise, which results mostly from mismappings and is elevated in
highly repetitive genomes. This can to some extend be handled using a
stringent mapping quality cutoff in the creation of the .bin (e.g. -q
30). To tackle this problem more efficiently, nQuire also contains the
subcommand “denoise”. It uses a Gaussian Mixture Model with Uniform
noise component (GMMU, for more information please refer to the next
section “Model” or the publication referenced above) to assess the
extent of this uniform noise, and scales it down allowing to easily
detect peaks in the histogram of base frequencies.

#+BEGIN_SRC bash
nQuire denoise base.bin -o base_denoised
#+END_SRC

The “denoise” subcommand also returns the percentage of information
kept after the denoising procedure. If this value is suspiciously low,
there might not be enough data left for subsequent testing. Please
inspect the histogram also with the “histo” command before and after
denoising to visually assess the shape of the distribution of base
frequencies.

*** Assessing ploidy level
There are two general ways to test the histogram for di-, tri- and
tetraploidy. The simpler one just uses ideal histograms under the
assumption of each of the ploidy levels (diploid: N(0.5,0.05);
triploid: N(0.33,0.04) + N(0.67,0.04); tetraploid: N(0.25,0.04) +
N(0.5,0.05) + N(0.75,0.04)) and does linear regression on the y-values
of the empirical and the ideal histograms. The subcommand for that is
“histotest”.

#+BEGIN_SRC bash
nQuire histotest base.bin
#+END_SRC

“histotest” reports for each ploidy level the sum of squared residuals
(SSR) of empirical vs. ideal histograms, as well as the slope, its
standard error and the R2 of the regression of y-values. A good fit
between ideal and empirical histograms is characterized by low SSR,
positive slope with low standard error, as well as a high R2.

The main testing framework of nQuire utilizes a Gaussian Mixture Model
(GMM, please refer to the next section “Model” as well as the
publication referenced above), which describes the histogram as a
mixture of gaussians with varying means and mixture proportions. The
likelihood of certain assumptions based on this model given the
empirical data is maximized using an Expectation-Maximization (EM)
algorithm.

There are three subcommands using this model: “modeltest” maximizes
the likelihood under the assumption of either di-, tri- or tetraploidy
where mean and mixture proportions are fixed, and only the standard
deviation of the Gaussians is varied.

#+BEGIN_SRC bash
nQuire modeltest base.bin
#+END_SRC

It returns the log-likelihood for each of the assumed ploidy levels,
together with the standard deviation of the Gaussians included in that
model.

The next subcommand using the GMM is “estmodel”. Here, no assumptions
are made and the EM-algorithm maximizes the likelihood of a mixture of
three Gaussians given the empirical data freely.

#+BEGIN_SRC bash
nQuire estmodel base.bin
#+END_SRC

The result is the maximized log-likelihood when parameters can be
varied freely, as well as all parameter estimates for the three
Gaussians (mixture proportion, mean and standard deviation).

The third and most important subcommand using the GMM is
“lrdmodel”. This is a mixture of the three fixed models from
“modeltest” and the free model in “estmodel”, as all four of those
models are used. Subsequently, the maximized log-likelihood of the
three fixed models are subtracted from the maximized log-likelihood of
the free model to get three delta log-likelihoods. As the
log-likelihood of the free model can basically be seen as the
“optimum” for the empirical data under the assumptions of this model,
the higher the delta log-likelihood of a fixed model, the further it
is from the optimum and the lower is the support for the corresponding
ploidy level.

#+BEGIN_SRC bash
nQuire lrdmodel base.bin
#+END_SRC

** Model
At the heart of nQuire is a Gaussian Mixture Model (GMM) which is used
in the “modeltest”, “estmodel” and “lrdmodel” subcommands. For the
“denoise” subcommand it is extended to a Gaussian Mixed Model with
Uniform noise component (GMMU).

The GMM aims to model the read frequency histogram as a mixture of up
to three Gaussian distributions between 0 and 1, that are scaled
relatively to each other by some mixture proportion. This model can be
used for parameter estimation through maximum likelihood estimation
using an Expectation-Maximization (EM) algorithm, as well as model
comparison when we have specific expectations about our data. We use
up to three Gaussians, because the expected distributions of read
frequencies at biallelic sites for each of our ploidy levels of
interest are one Gaussian with mean 0.5 for diploid, two Gaussians
with means 0.33 and 0.67 for triploid, and three Gaussians with means
0.25, 0.5 and 0.75 for tetraploid. We can fix these values in the GMM
to assess the maximal log-likelihood under each of the three
assumptions (three fixed models). Additionally we can estimate the
parameters without constraints to get the maximal log-likelihood under
complete freedom (one free model). The comparison of maximized
log-likelihoods under the fixed models to the free model then allows
us to assess how close each of these three ploidy assumptions are to
the optimum under the GMM model.

For the “denoise” command there is a fourth component added to the
three Gaussians, which has uniform probability density and only its
mixture proportion can be varied. Together with a free model for the
three Gaussians, the model under maximized likelihood allows us to
assess the proportion of uniform noise in the histogram.

